services:
  echo_example_with_python_and_pika:
    image: valawai/c1_echo_example_with_python_and_pika:${C1_ECHO_EXAMPLE_WITH_PYTHON_AND_PIKA_TAG:-latest}
    container_name: c1_echo_example_with_python_and_pika
    networks:  
      - valawai_net
    depends_on:
      mov:
        condition: service_healthy
        restart: true
        required: false
    environment:
      RABBITMQ_HOST: ${MQ_HOST:-mq}
      RABBITMQ_PORT: ${MQ_PORT:-5672}
      RABBITMQ_USERNAME: ${MQ_USER:-mov}
      RABBITMQ_PASSWORD: ${MQ_PASSWORD:-password}
      LOG_CONSOLE_LEVEL: ${LOG_LEVEL:-INFO}
    healthcheck:
      test: ["CMD-SHELL", "test -s /app/logs/component_id.json"]
      interval: 1m
      timeout: 10s
      retries: 5
      start_period: 1m
      start_interval: 5s


  mq:
    image: rabbitmq:${RABBITMQ_TAG:-management}
    container_name: mov_mq
    profiles: [mov]
    hostname: ${MQ_HOST:-mq}
    ports:
      - ${MQ_PORT:-5672}:5672
      - ${MQ_UI_PORT:-8082}:15672
    networks:
      - valawai_net
    environment:
      RABBITMQ_DEFAULT_USER: ${MQ_USER:-mov}
      RABBITMQ_DEFAULT_PASS: ${MQ_PASSWORD:-password}
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 1m
      timeout: 10s
      retries: 5
      start_period: 1m
      start_interval: 5s

  mongo:
    image: mongo:${MONGODB_TAG:-latest}
    container_name: mov_db
    profiles: [mov]
    hostname: ${DB_HOST:-mongo}
    ports:
      - ${MONGO_LOCAL_PORT:-27017}:27017
    networks:
      - valawai_net
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${DB_NAME:-movDB}
      MOV_DB_NAME: ${MOV_DB_NAME:-movDB}
      MOV_DB_USER_NAME: ${MOV_DB_USER_NAME:-mov}
      MOV_DB_USER_PASSWORD: ${MOV_DB_USER_PASSWORD:-password}
    volumes:
      - ${MONGO_LOCAL_DATA:-~/.mongo_data/treatmentJusticeValuatorMovDB}:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet localhost/${DB_NAME:-movDB} --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'"]
      interval: 1m
      timeout: 10s
      retries: 5
      start_period: 1m
      start_interval: 5s
    configs:
      - source: init-mongo.js
        target: /docker-entrypoint-initdb.d/init-mongo.js

  mov:
    image: valawai/mov:${MOV_TAG:-latest}
    container_name: mov
    profiles: [mov]
    depends_on:
      mongo:
        condition: service_healthy
        restart: true
      mq:
        condition: service_healthy
        restart: true
    ports:
      - ${MOV_UI_PORT:-8081}:8080
    networks:  
      - valawai_net
    environment:
      RABBITMQ_HOST: ${MQ_HOST:-mq}
      RABBITMQ_PORT: ${MQ_PORT:-5672}
      RABBITMQ_USERNAME: ${MQ_USER:-mov}
      RABBITMQ_PASSWORD: ${MQ_PASSWORD:-password}
      QUARKUS_MONGODB_DATABASE: ${MOV_DB_NAME:-movDB}
      QUARKUS_MONGODB_CREDENTIALS_USERNAME: ${MOV_DB_USER_NAME:-mov}
      QUARKUS_MONGODB_CREDENTIALS_PASSWORD: ${MOV_DB_USER_PASSWORD:-password}
      QUARKUS_MONGODB_HOSTS: ${DB_HOST:-mongo}:${MONGO_PORT:-27017}
      MOV_URL: http://0.0.0.0:${MOV_UI_PORT:-8081}
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://0.0.0.0:8080/q/health | grep -m 1 -P \"^[\\s|\\{|\\\"]+status[\\s|\\:|\\\"]+.+\\\"\" |grep -q \"\\\"UP\\\"\""]
      interval: 1m
      timeout: 10s
      retries: 5
      start_period: 1m
      start_interval: 5s  

networks:
  valawai_net:

configs:
  init-mongo.js:
    content: |
      db.createUser({
        user: process.env.MOV_DB_USER_NAME,
        pwd: process.env.MOV_DB_USER_PASSWORD,
        roles: [{
          role: 'readWrite',
          db: process.env.MOV_DB_NAME
        }]
      })
